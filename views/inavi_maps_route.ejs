<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>다중경로탐색</title>
</head>

<body>
    <!-- <div class=header>

    </header> -->

    <div class="body">

    </div>
    <div class="map_wrap">

        <!-- <div id="map"></div> -->
        <div id="map" style="width:100%;height:100px;position:relative;overflow:hidden;"></div>

        <!-- 지도타입 컨트롤 div 입니다 -->
        <div class="custom_typecontrol radius_border">
            <span id="btnRoadmap" class="selected_btn" onclick="setMapType('roadmap')">지도</span>
            <span id="btnSkyview" class="btn" onclick="setMapType('skyview')">스카이뷰</span>
        </div>

        <!-- 경로탐색 컨트롤 div 입니다 -->
        <div class="custom_typecontrol radius_border" style="position:absolute;top:10px;left:10px;overflow:hidden;width:250px;height:30px;margin:0;z-index:1;border:1">
            <span id="btnStart" class="btn" onclick="setRouteType(1)" style="width:50px">출발</span>
            <span id="btnVia1" class="btn" onclick="setRouteType(3)" style="width:30px">경유1</span>
            <span id="btnVia2" class="btn" onclick="setRouteType(4)" style="width:30px">경유2</span>
            <span id="btnVia3" class="btn" onclick="setRouteType(5)" style="width:30px">경유3</span>
            <span id="btnVia4" class="btn" onclick="setRouteType(6)" style="width:30px">경유4</span>
            <span id="btnVia5" class="btn" onclick="setRouteType(7)" style="width:30px">경유5</span>
            <span id="btnEnd" class="btn" onclick="setRouteType(2)" style="width:50px">도착</span>
        </div>

        <div class="custom_typecontrol radius_border" style="position:absolute;top:10px;left:260px;overflow:hidden;width:50px;height:30px;margin:0;z-index:1;border:1">
        <span id="btnRoute" class="btn" onclick="doRoute()" style="width:50px">탐색</span>
        </div>

        <!-- 경로탐색 JSON 결과 div 입니다 -->
        <div class="custom_typecontrol radius_border" style="position:absolute;top:10px;left:330px;overflow:hidden;width:70;height:30px;margin:0;z-index:1;border:0">
            <span id="btnGoToJsonResult" class="btn" onclick="gotoJSON()" style="width:65px">JSON보기</span>
        </div>

        <!-- 옵션 div -->
        <div style="position:absolute;left:10px;top:45px;width:250px;padding:5px;background:rgba(255, 255, 255, 0.8);z-index: 1;font-size:11px;border-radius: 5px;">
            <input id="optShotest" onclick="setOption(0)" type="radio" name="option" style="margin-left: 5px;"/>짧은길
            <input id="optRecommended" onclick="setOption(1)" type="radio" name="option" checked style="margin-left: 5px;"/>추천길
            <input id="optComfortable" onclick="setOption(2)" type="radio" name="option" style="margin-left: 15px"/>편한길
            <input id="optFastest" onclick="setOption(3)" type="radio" name="option" style="margin-left: 15px"/>빠른길
            <!-- <input id="optMainroad" onclick="setOption(2)" type="radio" name="option" style="margin-left: 15px"/>큰길 -->
        </div>

        <!-- 이동체 div -->
        <div style="position:absolute;left:10px;top:75px;width:250px;padding:5px;background:rgba(255, 255, 255, 0.8);z-index: 1;font-size:11px;border-radius: 5px;">
            <input id="mobWalk" onclick="setMobility(0)" type="radio" name="mobility" checked style="margin-left: 5px;"/>걷기
            <input id="mobBicycle" onclick="setMobility(1)" type="radio" name="mobility" style="margin-left: 15px"/>자전거
        </div>

        <!-- 검색 div -->
        <div style="position:absolute;left:10px;top:110px;width:250px;padding:5px;background:rgba(255, 255, 255, 0.8);z-index: 1;font-size:13px;border-radius: 5px;">
            <form onsubmit="searchKeyword(); return false;">
                키워드 : <input type="text" value="아이나비시스템즈" id="keyword" size="15">
                <button type="submit">검색</button>
            </form>
        </div>

        <!-- 메뉴 생성 -->
        <div id="menu_wrap" class="bg_white" style="top:145px">
            <div id="menu_title" style="text-align:center"><P>검색 결과 목록</P></div>
            <hr>
            <div style="font-size:12px;font-family:'Malgun Gothic', '맑은 고딕', sans-serif;">
                <div id="clicked_type" style="text-align:left">결과 갯수 : </div>
                <div id="clicked_name" style="text-align:left"></div>
            </div>
            <hr>
            <ul id="placesList"></ul>
        </div>
    </div>

    
    <link rel="stylesheet" href="css/maps_inavi.css" />
    <script type="text/javascript" src="script/inavimaps.js"></script>
    <script type="text/javascript" src="script/boundarys.js"></script>
    <script type="text/javascript" src="script/typenames.js"></script>
    <script type="text/javascript" src="script/search.js"></script>
    <script type="text/javascript" src="script/route.js"></script>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.10.2.js"></script>

    <script>
        let result_obj = JSON.parse('<%- JSON.stringify(result) %>');
        let isSuccess = result_obj.header.isSuccessful;

        let user_obj = result_obj.user_info;
        let cnt_route = 0;
        let user_pos = [127.110767364419, 37.402186130724];// 아이나비시스템즈

        if (isSuccess) {
            cnt_route = result_obj.routes.length;
            user_pos = [ result_obj.routes[0].vertex_info[~~((result_obj.routes[0].vertex_info.length) / 2)].x, result_obj.routes[0].vertex_info[~~((result_obj.routes[0].vertex_info.length) / 2)].y ];
        }

        // map 사이즈 조절
        var screenHeight = window.innerHeight - 18;
        document.getElementById("map").style.height = screenHeight + "px";

        let distanceOverlay;

        function initMap() {

            map = new inavi.maps.Map({
                center: user_pos,
                container: "map",
                zoom: 17
            });


            // 지도 클릭 이벤트 등록
            map.on("click", function (mouseEvent) {
                // var lnglat = mouseEvent.lngLat;
                // var pathname = window.location.pathname;
                // var move2url = pathname + '?lng=' + lnglat.lng + '&lat=' + lnglat.lat + '&type=0&api=inavi';
                // window.open(move2url, '_self');

                // alert('클릭 기능 아직 미적용')
                console.log('클릭된 좌표 : ' + mouseEvent.lngLat.lng + ", " + mouseEvent.lngLat.lat);
                setMapClick(mouseEvent.lngLat);
            });
            //-- 지도 클릭 이벤트 등록


            marker = new inavi.maps.Marker({
                map: map,
                center: user_pos,
            });
            marker.setVisible(false);


            // 인포윈도우
            searchinfoWindow = new inavi.maps.InfoWindow({ map: map, zIndex: 1, opacity: 0, offset: [0, -45], closeButton: false });


            // 대구 테크노폴리스 도로링크 유효 범위
            // var boundarys = new inavi.maps.Polyline({
            //     map: map,
            //     path: getDaeguBoundary(),
            //     style: {
            //         lineColor: "#808080",
            //         lineWidth: 3,
            //         lineDasharray: [1, 1],
            //     },
            // });

            // 서울 범위
            // var boundarys = new inavi.maps.Polyline({
            //     map: map,
            //     path: getBukhansanBoundary(),
            //     style: {
            //         lineColor: "#808080",
            //         lineWidth: 3,
            //         lineDasharray: [1, 1],
            //     },
            // });

            // onmouseover

            // outmouseover

            //-- 노드 생성



            // 마커가 표시될 위치입니다
            markers.push(
                // 시작점
                new inavi.maps.Marker({
                    map: map,
                    // icon: "https://www.fivepin.co.kr/resources/images/PoiMarker/marker_1_on.png",
                    icon: "images/flags/ico_road_flag_start.png",
                    offset: [13, -4], // 깃발 봉위치를 센터로
                    position: [0, 0],
                    visibility: false,
                    title: "출발지",
                }));
            markers.push(
                // 종료점
                new inavi.maps.Marker({
                    map: map,
                    // icon: "https://www.fivepin.co.kr/resources/images/PoiMarker/marker_3_on.png",
                    icon: "images/flags/ico_road_flag_arrive.png",
                    offset: [13, -4], // 깃발 봉위치를 센터로
                    position: [0, 0],
                    visibility: false,
                    title: "목적지",
                }));
            for(var ii=0; ii<100; ii++) {
                markers.push(
                // 경유지
                new inavi.maps.Marker({
                    map: map,
                    // icon: "https://www.fivepin.co.kr/resources/images/PoiMarker/marker_2_on.png",
                    icon: "images/flags/ico_road_flag_via.png",
                    offset: [13, -4], // 깃발 봉위치를 센터로
                    position: [0, 0],
                    visibility: false,
                    title: "경유지"+ii,
                }));
            }

            if (isSuccess) {
                // 경로 그리기
                drawRoute(result_obj, map);

                // 출발지
                setDeparture(new inavi.maps.LngLat(user_obj.start.x ,user_obj.start.y));
                // 목적지
                setDestination(new inavi.maps.LngLat(user_obj.end.x, user_obj.end.y));
                // 경유지
                if (user_obj.vias != undefined) {
                    for(var ii=0; ii<user_obj.vias.length; ii++) {
                        if (user_obj.vias[ii].x != 0 && user_obj.vias[ii].y != 0) {
                            setWaypoints(ii, new inavi.maps.LngLat(user_obj.vias[ii].x, user_obj.vias[ii].y));
                        }
                    }
                }

                // 경로 정보를 커스텀 오버레이로 생성하고 지도에 표시합니다
                drawRouteInfo();
            }
            else {
                alert('경로 탐색 요청 실패')
            }
            //-- 마커가 표시될 위치입니다

        } // initMap
        


        function doRoute() {
            if (typeRouteStep == 0 || departure_pos === undefined || destination_pos === undefined ) {
                alert("출,도착지를 새로 설정하고 사용하세요.")
            } else {
                var params = new URLSearchParams(window.location.search);
                var pathsplit = window.location.pathname.split('/');
                var pathname = '/api/' + pathsplit[pathsplit.length-1];
                params.set('start', departure_pos.lng.toString() + ',' + departure_pos.lat.toString());
                params.set('end', destination_pos.lng.toString() + ',' + destination_pos.lat.toString());
                // var pathname = '/optimalposition'; // window.location.pathname;
                // var move2url = pathname + '?' + params.toString();
                // var move2url = pathname + '?lng=' + latlng.lng + '&lat=' + latlng.lat + '&type=0&near=true&expand=true&api=inavi';
                params.delete('vias');
                for(var ii = 0; ii < waypoint_pos.length; ii++) {
                    if (waypoint_pos[ii] != null && waypoint_pos[ii].lng > 120 && waypoint_pos[ii].lat > 30) {
                        params.append('vias', waypoint_pos[ii].lng.toString() + ',' + waypoint_pos[ii].lat.toString());
                    }
                }
                params.set('option', getOption());
                params.set('mobility', getMobility());

                getRoute(pathname, params);
            
                setRouteType(0);
            }
        }


        // 경로 결과를 새창에서 JSON 결과로 보내도록 하자
        function gotoJSON() {
            setRouteType(0);

            if (departure_pos === undefined || destination_pos === undefined ) {
                alert("출,도착지를 새로 설정하고 사용하세요.")
            } else {
                var params = new URLSearchParams(window.location.search);
                var pathsplit = window.location.pathname.split('/');
                var pathname = '/api/' + pathsplit[pathsplit.length-1];
                params.set('start', departure_pos.lng.toString() + ',' + departure_pos.lat.toString());
                params.set('end', destination_pos.lng.toString() + ',' + destination_pos.lat.toString());
                // var pathname = '/optimalposition'; // window.location.pathname;
                // var move2url = pathname + '?' + params.toString();
                // var move2url = pathname + '?lng=' + latlng.lng + '&lat=' + latlng.lat + '&type=0&near=true&expand=true&api=inavi';
                params.delete('vias');
                for(var ii = 0; ii < waypoint_pos.length; ii++) {
                    if (waypoint_pos[ii] != null && waypoint_pos[ii].lng > 120 && waypoint_pos[ii].lat > 30) {
                        params.append('vias', waypoint_pos[ii].lng.toString() + ',' + waypoint_pos[ii].lat.toString());
                    }
                }
                params.set('option', getOption());
                params.set('mobility', getMobility());

                var route2url = pathname + '?' + params.toString();

                console.log("request route : " + route2url.toString());

                window.open(route2url, '_blank');                    
            }
        }


        function redrawRoute(map) {
            if (links != undefined && links.length) {
                links.forEach(element => element.setMap(map));
            }

            if (nodes != undefined && nodes.length) {
                nodes.forEach(element => element.setMap(map));
            }

            if (distanceOverlay != undefined) {
                distanceOverlay.setMap(map);
            }
        }


        // draw map item
        function drawRoute(result, map) {
            result_obj = result;

            user_obj = result_obj.user_info;
            cnt_route = result_obj.routes.length;

            user_pos.x = result_obj.routes[0].x;
            user_pos.y = result_obj.routes[0].y;

            var bounds = new Array();

            // 경로 그리기
            for (var ii = cnt_route - 1; ii >= 0; --ii) {
                let result_dat = result_obj.routes[ii];
                // var cntLink = result_dat.link_info.length;
                // var cntVtx = result_dat.vertex_info.length;
                // var cntJct = result_dat.junction_info.length;

                var vertices = new Array();
                var vertex_offset = 0;

                // 경로선 생성
                var via_idx = 0;
                result_dat.link_info.forEach(function(link) {
                    for (var vtx = 0; vtx < link.vertex_count; vtx++) {
                        // 경로선 확장
                        bounds.push([result_dat.vertex_info[vertex_offset].x, result_dat.vertex_info[vertex_offset].y]);
                        
                        vertices.push([result_dat.vertex_info[vertex_offset].x, result_dat.vertex_info[vertex_offset].y]);
                        vertex_offset++;
                    }

                    // if (ii != 0 && link.guide_type != 0) {
                    //     via_idx++;

                    //     // // 경로선 추가
                    //     // links.push(new inavi.maps.Polyline({
                    //     //     map: map,
                    //     //     path: vertices,
                    //     //     style: {
                    //     //         lineOffset: off,
                    //     //         lineColor: color,
                    //     //         // lineColor: colors[via_idx++ % colors.length],
                    //     //         lineWidth: 5,
                    //     //         lineOpacity: 0.7,
                    //     //     },
                    //     // }));
                        
                    //     // // 초기화
                    //     // vertices.splice(0);
                    // }
                }); // forEach

                links.push(new inavi.maps.Polyline({
                    map: map,
                    path: vertices,
                    style: {
                        lineOffset: route_offset[ii],
                        lineColor: route_color[ii],
                        // lineColor: colors[via_idx++ % colors.length],
                        lineWidth: 5,
                        lineOpacity: 0.8,
                    },
                }));

                // // 초기화
                // vertices.splice(0);

                //-- 경로선 생성


                // 노드 생성
                // 경로에 노드를 생성합니다
                // var off = 0;
                // // 마지막 목적지의 종료 노드까지 처리하기 위해 for를 +1해서 돌림
                // for (var ii = 0; ii < cntLink; ii++) {
                //     nodes.push(new inavi.maps.Circle({
                //         map: map,
                //         position: [result_dat.vertex_info[off].x, result_dat.vertex_info[off].y], // 원 중심 좌표
                //         radius: 0.005, // 원 반지름 킬로미터 단위
                //         style: {
                //             fillOpacity: 0.5,  // 채우기 불투명도 입니다
                //             fillColor: "#CFE7FF",
                //             fillOutlineColor: "#DB4455",
                //         },
                //     }));

                //     off += result_dat.link_info[ii].vertex_count;
                //     if (off >= result_dat.vertex_info.length) {
                //         break;
                //     }                
                // } // for

                // // 마지막 목적지의 종료 노드까지 처리하기 위해 
                // if (result_dat.vertex_info[off - 1] != undefined) {
                //     nodes.push(new inavi.maps.Circle({
                //         map: map,
                //         position: [result_dat.vertex_info[off - 1].x, result_dat.vertex_info[off - 1].y], // 원 중심 좌표
                //         radius: 0.005, // 원 반지름 킬로미터 단위
                //         style: {
                //             fillOpacity: 0.5,  // 채우기 불투명도 입니다
                //             fillColor: "#CFE7FF",
                //             fillOutlineColor: "#DB4455",
                //         },
                //     }));
                // }
                //-- 노드 생성

                // 정션 생성
                // KakaoVX 스타일
                // if (result_dat.junction_info != undefined) {
                //     result_dat.junction_info.forEach(function(jct) {
                //         jct.junction.forEach(function(lnk) {
                //             var junctions = new Array();
                //             lnk.vertices.forEach(function(coord) {
                //                 junctions.push([coord.x, coord.y]);
                //             }); // forEach vtx
                            
                //             links.push(new inavi.maps.Polyline({
                //                 map: map,
                //                 path: junctions,
                //                 style: {
                //                     lineColor: "#F09B59", //"#FFC90E",
                //                     lineWidth: 2,
                //                     // lineOpacity: 0.7,
                //                 },
                //             }));
                //         });// forEach lnk
                //     }); // forEach jct
                // }
                if (result_dat.junction_info != undefined) {
                    result_dat.junction_info.forEach(function(jct) {
                        var vertices = new Array();
                        jct.vertices.forEach(function(coord) {
                            vertices.push([coord.x, coord.y]);
                        }); // forEach vtx
                        
                        links.push(new inavi.maps.Polyline({
                            map: map,
                            path: vertices,
                            style: {
                                // lineColor: "#F09B59", //"#FFC90E",
                                lineColor: "#309BF9", //"#FFC90E",
                                lineWidth: 3,
                                lineDasharray: [2, 1], // (1픽셀 x lineWidth) 라인, (1픽셀 x lineWidth) 공백 표시 반복.
                                // lineOpacity: 0.7,
                            },
                        }));
                    }); // forEach jct
                }              
                //-- 정션 생성
            }




            map.fitCoordinates(bounds, {
                padding: 90,
                // heading: 90,
                // tilt: 30,
                // duration: 1000
            });
        }


        // 커스텀 오버레이를 생성하고 지도에 표시합니다
        function drawRouteInfo() {                                
            distanceOverlay = new inavi.maps.CustomInfoWindow({
                map: map, // 커스텀오버레이를 표시할 지도입니다
                content: getResultHtmlContent(result_obj.routes[0].summary.distance, result_obj.routes[0].summary.time),  // 커스텀오버레이에 표시할 내용입니다
                position: markers[1].getPosition(), // 커스텀오버레이를 표시할 위치입니다.
                // xAnchor: 0,
                // yAnchor: 0,
                anchor: 'top-right',
                zIndex: 3,
                opacity: 0.8,
                closeButton: true
            });
        }


        // 키워드 검색 
        function searchKeyword() {
            var keyword = document.getElementById('keyword').value;

            if (!keyword.replace(/^\s+|\s+$/g, '')) {
                alert('키워드를 입력해주세요');
                return false;
            }

            // var pathname = 'https://api-maps.cloud.toast.com/maps/v3.0/appkeys/uuLPV7fHLk6NIVfCPnBv/searches';
            var pathname = 'https://dev-maps.inavi.com/maps/v3.0/appkeys/<%=javascriptkey%>/searches'
            var search2url = pathname + '?&query=' + keyword.toString() + '&reqcount=' + 10;

            console.log("request, search data: " + keyword)

            $.ajax({
                type: 'get',         // 타입 (get, post, put 등등)
                url: search2url,       // 요청할 서버 url
                // async: false,         // 비동기화 여부 (default : true)
                success: function(result) {                
                    var header = result.header;
                    if (header.isSuccessful == true) {      
                        console.log("response, search data: " + result.search.totalcount)

                        // set search result
                        displaySearchList(result.search);
                    } else {
                        alert('err code: ' + header.resultCode + '\nerr msg: ' + header.resultMessage)
                    }
                },
                error: function(request, status, error) {
                    alert('통합 검색 요청 실패')
                },
                complete: function(xhr, status) {
                }
            });    
        }

    </script>
    <script type="text/javascript"
        src="https://maps.inavi.com/maps/v3.0/appkeys/<%=javascriptkey%>/maps?callback=initMap"></script> -->
    <!-- <script src="/script/position.js"></script>

</body>

</html>